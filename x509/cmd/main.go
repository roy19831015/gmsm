package main

import (
	"crypto/ecdsa"
	"encoding/asn1"
	"github.com/roy19831015/gmsm/sm2"
	"github.com/roy19831015/gmsm/ucapp4go"
	"github.com/roy19831015/gmsm/x509"
	"math/big"
	"strings"
)

func main() {
	str := "MIIZIzCCE/sCAQQwghOdMIIPIjAPFgJFUwIBBBYGR09NQUlOFg41MDAxMTIwMDAwMDM5OTCCBVQCAQMM\nRea1i+ivleWFqOWbvee7n+S4gOWPkeelqOebkeWItueroOWbveWutueojuWKoeaAu+WxgOmHjeW6huW4\ngueojuWKoeWxgAIBATCCBNAEggTMMIIEyDCCBGygAwIBAgIGAwAAARLRMAwGCCqBHM9VAYN1BQAwLDEL\nMAkGA1UEBhMCQ04xHTAbBgNVBAMMFOeojuWKoea1i+ivlUNBMihTTTIpMB4XDTIwMTAxMDAwMDAwMFoX\nDTMwMTAxMDAwMDAwMFowgbcxCzAJBgNVBAYTAkNOMQ8wDQYDVQQIDAbph43luoYxKjAoBgNVBAoMIeie\njeaYk+eul+eUteWtkOWPkeelqOacjeWKoeW5s+WPsDEhMB8GA1UECwwY6YeN5bqG5biC5Zu95a6256iO\n5Yqh5bGAMUgwRgYDVQQDDD/lhajlm73nu5/kuIDlj5Hnpajnm5HliLbnq6Dlm73lrrbnqI7liqHmgLvl\nsYDph43luobluILnqI7liqHlsYAwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAAQHXGJiVPfrsU08H9Uk\nHe73tn1n4MrKKd1ormjrhZtyzLPbCu1W6kEYtu6ZF5L4joOdXvKXFil7gN1zWQPNxmkuo4IC6jCCAuYw\nDgYDVR0PAQH/BAQDAgTwMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUXurQ2mOzU4irlABTeeCkLow9\nb8EwHQYDVR0OBBYEFBAVVjjinfJikc4vBLvYH8bDJqbGMEQGCSqGSIb3DQEJDwQ3MDUwDgYIKoZIhvcN\nAwICAgCAMA4GCCqGSIb3DQMEAgIAgDAHBgUrDgMCBzAKBggqhkiG9w0DBzCB6gYDVR0fBIHiMIHfMGeg\nZaBjhmFodHRwOi8vMTI3LjAuMC4xOjIzODkvY249Y3JsMDAwMyxvdT1jcmwwMCxvdT1jcmwsYz1jbj9j\nZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0LCo/YmFzZT9jbj1jcmwwMDAzMHSgcqBwhm5sZGFwOi8vRUND\nMjU2LmNoaW5hdGF4Lmdvdi5jbjoyMzg5L2NuPWNybDAwMDMsb3U9Y3JsMDAsb3U9Y3JsLGM9Y24/Y2Vy\ndGlmaWNhdGVSZXZvY2F0aW9uTGlzdCwqP2Jhc2U/Y249Y3JsMDAwMzAzBggrBgEFBQcBAQQnMCUwIwYI\nKwYBBQUHMAGGF2h0dHA6Ly8xMjcuMC4wLjE6MTY1ODgvMCMGCisGAQQBqUNkBQgEFQwTMDMtNzY4YzBm\nNTBhZWNiY2MxZTAjBgorBgEEAalDZAUJBBUMEzAzLTc2OGMwZjUwYWVjYmNjMWUwGwYKKwYBBAGpQ2QF\nCwQNDAsxNTAwMDAwMDAwMDAuBgorBgEEAalDZAUMBCAMHuesrOS4ieaWueW5s+WPsOebkeWItueroOiv\ngeS5pjASBgorBgEEAalDZAIBBAQMAjY3MBoGBSpWCwcCBBEMD+mHjeW6huW4guWbveeojjAWBgUqVgsH\nAwQNDAsxNTAwMDAwMDAwMDAjBghghkgBhvhDCQQXDBUwMTAwMDEwMDAwMDAwMDAwMzM5NTUwGgYIYIZI\nAYb4QwoEDgwMNTAwMDIwMjAwMzQxMAwGCCqBHM9VAYN1BQADSAAwRQIga5nKbFrmp8/jpM+bSEYhszE+\nTBBGYdVAXL+BsdxXY9sCIQDjydwEEspkXOBS/ykYwzavX2kGNLpGaGplN48GVm4tOBgPMjAyMDEwMDcx\nNjAwNTBaGA8yMDIwMTAwNzE2MDAwMFoYDzIwMjMxMDA3MTYwMDAwWjCCCY0WA29mZASCCX5QSwMEFAAA\nAAgApYuTUOp0e1fqAAAAoQEAABIAAABEb2NfMC9Eb2N1bWVudC54bWxlkNtqwzAMhu/zFEb3i50wdgiJ\ny9owKGwwxnpdPNdLDYlVYndJ375Oc+jpwsb6pf+zpHTWViX5V7XVaDKIQgZEGYkbbYoMVj/vDy8w40GK\nf5skR7mvlHHEW4xNvJTB1rldQmnTNKGP7U7JEOuCxix6Ah4QcjIusKrQ5MKJThrET9GujHbLnMePKb1W\nzlVfolBvtRqMo7g9WC1FOceWM8JIHPnz+txTLpM9h96Desz+t9TyW1k+vdYs9MMNjikdjJDrQaYG7U3D\nZJn7VQKZC6s+UGZwKqLdvWZ0gcb5LXYfAT2zB1AfjKvmwRFQSwMEFAAAAAgApYuTUBvEK/zCAAAAHgEA\nABUAAABEb2NfMC9QdWJsaWNSZXNfMC54bWxVjlEOwUAQht+dYjLvuggijdUEIRIRKQ7Q1KgmurPpbpRz\nOIMzeHIbcQ7belBv//dn/i8zDC7ZCc6Um5SVxLbXQiAV8z5VicTddtYcYDBqDPmw90My4K6V8R1JPFqr\nfSGKovAcG02xx3kiOq12H2EcGVpyLNGNcNQAqAwzVtaUVGNYTCV2Ecq8ijKS+L4/Xs8bimom/nbVasIn\nzjc6iqnu+rWVsYewvWpnC+dj905qzZryCWeaFSkrcVD3/xm/VVjGD1BLAwQUAAAACACli5NQdo5nYCsF\nAAAKFgAAHgAAAERvY18wL1BhZ2VzL1BhZ2VfMC9Db250ZW50LnhtbMWYS2tbRxTH9/kUw91nNGfeYyyH\nyMZQSGjAbpsuZfvWVqtKRlZiu6sQ6INCW7rOou2iECgUugmhod+mrum36H/mXt1X3ARi2dbq6My9M3N+\nc15zV++cfD5mj/PZ0Wg66WfERcbyye50bzTZ72cfbG/e9tmdtVur00/2Vh4M93OGxydHK/jbzw7m88OV\nXu/4+Jjj/9Fhvsuns/2eFGSztVuMpZfuzvJh/FP+fXBwejTaHY4H05M1wQRTgkmx2usOxbd7zdfTy+vT\nyTyfzBvT3Rue5jP23kY/k1mhLge285P5+zuf5rvzNKoyNpg+muwNZ6f9zHFtWeDGMTJceOOVZ3hgE7P3\nM52xrdEXOSbEU0FrU81bzrw5Go/Xp+PpjH04HD+KDxoDQ8AtabcOh7tQmqzXeS/uaH26l7OH/ey24CpI\n5ULGPo4rCemMy9hGPp4PH0aF1do5w0rBsq6mFrK1s2d/nf3+4vz592ff/vLPk1dnfzwp0C0WrLj02mDe\nxMs2eUnuiTlOoBQ5rW/f72cwAPuXgcEUUJJaMQhKSxZHnCRdMLkIqqGrgSo5kXRKl1Ct0T4E8Pny+eWB\nuCYQDUuZ5jiFJhAvJDmKQIzX5C1IGOcCVBgj4a8fCE7EkjGyBOLISOGSw1weiG9HFKxUXLU9JCgl4AfR\n2ZWwCLfkGlS4ilYiCtePBFGjnS2RGKWNBJLzVz9dHkloIiEcugUTo9tMnFMggX2QEYVvkA4qwQne+Shc\nPxPy4FDEDXFtrAo+W/v75RISCYkWFB3zVhuI9zZhEMLLInwgFeETQpBRuAEgcNMybgjbQD5D2Pzw4xJ4\nUIuH5YGApJNJopNExzC08BUdXOUi184D60ttVEnDB6Q5RMyvS8iqJFs0AncCv5RKZCeVSJtcQimyKaNI\nL5LbBB1Tyg0wMcq7Rcg4UkJhnfNny3CRVrMiJVcaxcZ0iw0pVN9Ya4wqq44LlJzEC8RNuAEkAUFTplbi\nUpNRMWy+ebEEJrrFRHM0GuhIXKcjoYVPmLISI7NS9A6MIZ5vgomloHwROzG1KWvB5Py3n5fAxDSZeK6I\nEepNpwabIjw4HBSZNoVOIdVj/8dEa301TLQlZxd+4hVqD+D/+/V3S2BiOzVYBUaad5KJ1wUAcqr0k1Kq\nx66didJeVCUYDiylQuz8+dUSmLR6V0K1sZGJ6dRhWJ46M2FM6SilVI9dOxQhELS6uiRp52M///LpEqD4\ndl/CvY5QrL8ISsmiaFMWwtuhXFVzIsjXN0ctpQAUXP+WAKXdwTqkq1SOAaZz+YPtYRE3qeZUQhq5AShS\nOu9KKDoWAnSwuBBfHopsd7AeabOAori13VzrnSxTrEpOUgnl2E2AMVLZ6k4sTOrt3+0jwYPh/KBJptWo\nxA5EULCpYTUIVousi+YWDe+90ST/aLQ3PwC/rpVb89n0s/ztdurX7Ly7szPLH4+G83xvYzgfrt1nKmYM\nCjGU02Y8uoRBU2u4094JyyQKJQnCAco4Kkn7OIp3XFM1QJOB25kTuvlcnM5735iuVjXWrZQGZ2DQuNaT\nNaco1qw0g8beKmVtQjXXBbaWX8w6WFoHW5/gGw+21W0RVya6DbajdLBSMum4xKUoGp4kJMTWIcPvr/KY\npY03Q68t89zGm1GiVikRmNKSdHA91AzpcJWIqSz+fIpaxC9awVo3YJZLZwMuXbVSJMMasy0UjTUXKo1E\n6SVco5qnHKHGepVq0NhYpay3X032upnvcMCFNn0mrT+qVt9RF+/sI/7/A1BLAwQUAAAACACli5NQZP+X\nbckAAABMAQAABwAAAE9GRC54bWxlkFELwiAUhd/3K8T35oyybWwOahQ9FVG9RqlbQXljs1b/Pktqg16U\n73juOVyT7HE5o7uq6hPoFFM/wEhpAfKkyxRv1tNeiDPuJVDIeDHNkXXrOraU4qMx15iQpml8y/VVCR+q\nkvQDyjDatokUcw+hT0IOYgzy+eZWmesCnNLRch4OaJ8xKg40koOQ0WgUsahgQ7GXYSAKlpDW252eVGpv\noOKzpXN82XWSv9Jv5QrAcHvvAmLP20Vp49ttfxOfd68T4TZxaL+Gey9QSwECFAMUAAAACACli5NQ6nR7\nV+oAAAChAQAAEgAAAAAAAAAAAAAAtoEAAAAARG9jXzAvRG9jdW1lbnQueG1sUEsBAhQDFAAAAAgApYuT\nUBvEK/zCAAAAHgEAABUAAAAAAAAAAAAAALaBGgEAAERvY18wL1B1YmxpY1Jlc18wLnhtbFBLAQIUAxQA\nAAAIAKWLk1B2jmdgKwUAAAoWAAAeAAAAAAAAAAAAAAC2gQ8CAABEb2NfMC9QYWdlcy9QYWdlXzAvQ29u\ndGVudC54bWxQSwECFAMUAAAACACli5NQZP+XbckAAABMAQAABwAAAAAAAAAAAAAAtoF2BwAAT0ZELnht\nbFBLBQYAAAAABAAEAAQBAABkCAAAAAACAR4CARQwFjAUBgoqgRzPVQYHAgIBAQEABAMyLjEEggQfMIIE\nGzCCA76gAwIBAgIGAwAAAC/VMAwGCCqBHM9VAYN1BQAwLDELMAkGA1UEBhMCQ04xHTAbBgNVBAMMFOeo\njuWKoea1i+ivlUNBMihTTTIpMB4XDTIwMDIxNzAwMDAwMFoXDTI1MDIxNzAwMDAwMFowXzELMAkGA1UE\nBhMCQ04xGzAZBgNVBAsMEuWbveWutueojuWKoeaAu+WxgDEzMDEGA1UEAwwq5Zu95a6256iO5Yqh5oC7\n5bGA55S15a2Q5Y2w56ug5rWL6K+V57O757ufMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEbKLTHgd5\nhyOZiehhwudaVFa5qOf+5IVDy8AWn362awgEaSQKX43jl7lpyLt8AQxK7LVOdeE0ZaF/5DPkEA7BJqOC\nApUwggKRMA4GA1UdDwEB/wQEAwIE8DAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFF7q0Npjs1OIq5QA\nU3ngpC6MPW/BMB0GA1UdDgQWBBTC6NDBpzdSb823UN0N9Mx977ZPgjBEBgkqhkiG9w0BCQ8ENzA1MA4G\nCCqGSIb3DQMCAgIAgDAOBggqhkiG9w0DBAICAIAwBwYFKw4DAgcwCgYIKoZIhvcNAwcwgeoGA1UdHwSB\n4jCB3zBnoGWgY4ZhaHR0cDovLzEyNy4wLjAuMToyMzg5L2NuPWNybDAwMDMsb3U9Y3JsMDAsb3U9Y3Js\nLGM9Y24/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdCwqP2Jhc2U/Y249Y3JsMDAwMzB0oHKgcIZubGRh\ncDovL0VDQzI1Ni5jaGluYXRheC5nb3YuY246MjM4OS9jbj1jcmwwMDAzLG91PWNybDAwLG91PWNybCxj\nPWNuP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3QsKj9iYXNlP2NuPWNybDAwMDMwMwYIKwYBBQUHAQEE\nJzAlMCMGCCsGAQUFBzABhhdodHRwOi8vMTI3LjAuMC4xOjE2NTg4LzAjBgorBgEEAalDZAUIBBUMEzAz\nLTAwMDIyNmIxODQ3NDU0NDMwIwYKKwYBBAGpQ2QFCQQVDBMwMy0wMDAyMjZiMTg0NzQ1NDQzMBIGCisG\nAQQBqUNkAgEEBAwCMTkwEQYFKlYLBwIECAwG5oC75bGAMBYGBSpWCwcDBA0MCzAwMDAwMDAwMDAwMBsG\nBSpWCwcFBBIMEDAwMDIyNmIxODQ3NDU0NDMwIwYIYIZIAYb4QwkEFwwVMDEwMDAxMDAwMDAwMDAwMDA0\nNTQ5MAwGCCqBHM9VAYN1BQADSQAwRgIhAIvcZpGvadmFSW+0R9IYwBu2eWLeUibKumEymQpwpQCKAiEA\nzDFbBWLZ1WWy8CtAQkKPyw9bhBTMdlIvLdLh6nPSRckGCCqBHM9VAYN1A0gAMEUCIQCH0nS/Gjf2bMOr\nuJKep9VNI/Y8qz0XKGQWaX8g47FO3gIgfMpADoEwccCTWP8f5H1rUUQCwMUK8feu0wQkih7dnNcYDzIw\nMjAxMDEwMDcxMTIwWgMhABSFm5JQOaUP4mjUDkqQPaRNZMxWse69CQLUWlpBoTS1FiEvRG9jXzAvU2ln\nbnMvU2lnbl8wL1NpZ25hdHVyZS54bWwEggTMMIIEyDCCBGygAwIBAgIGAwAAARLRMAwGCCqBHM9VAYN1\nBQAwLDELMAkGA1UEBhMCQ04xHTAbBgNVBAMMFOeojuWKoea1i+ivlUNBMihTTTIpMB4XDTIwMTAxMDAw\nMDAwMFoXDTMwMTAxMDAwMDAwMFowgbcxCzAJBgNVBAYTAkNOMQ8wDQYDVQQIDAbph43luoYxKjAoBgNV\nBAoMIeiejeaYk+eul+eUteWtkOWPkeelqOacjeWKoeW5s+WPsDEhMB8GA1UECwwY6YeN5bqG5biC5Zu9\n5a6256iO5Yqh5bGAMUgwRgYDVQQDDD/lhajlm73nu5/kuIDlj5Hnpajnm5HliLbnq6Dlm73lrrbnqI7l\niqHmgLvlsYDph43luobluILnqI7liqHlsYAwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAAQHXGJiVPfr\nsU08H9UkHe73tn1n4MrKKd1ormjrhZtyzLPbCu1W6kEYtu6ZF5L4joOdXvKXFil7gN1zWQPNxmkuo4IC\n6jCCAuYwDgYDVR0PAQH/BAQDAgTwMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUXurQ2mOzU4irlABT\neeCkLow9b8EwHQYDVR0OBBYEFBAVVjjinfJikc4vBLvYH8bDJqbGMEQGCSqGSIb3DQEJDwQ3MDUwDgYI\nKoZIhvcNAwICAgCAMA4GCCqGSIb3DQMEAgIAgDAHBgUrDgMCBzAKBggqhkiG9w0DBzCB6gYDVR0fBIHi\nMIHfMGegZaBjhmFodHRwOi8vMTI3LjAuMC4xOjIzODkvY249Y3JsMDAwMyxvdT1jcmwwMCxvdT1jcmws\nYz1jbj9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0LCo/YmFzZT9jbj1jcmwwMDAzMHSgcqBwhm5sZGFw\nOi8vRUNDMjU2LmNoaW5hdGF4Lmdvdi5jbjoyMzg5L2NuPWNybDAwMDMsb3U9Y3JsMDAsb3U9Y3JsLGM9\nY24/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdCwqP2Jhc2U/Y249Y3JsMDAwMzAzBggrBgEFBQcBAQQn\nMCUwIwYIKwYBBQUHMAGGF2h0dHA6Ly8xMjcuMC4wLjE6MTY1ODgvMCMGCisGAQQBqUNkBQgEFQwTMDMt\nNzY4YzBmNTBhZWNiY2MxZTAjBgorBgEEAalDZAUJBBUMEzAzLTc2OGMwZjUwYWVjYmNjMWUwGwYKKwYB\nBAGpQ2QFCwQNDAsxNTAwMDAwMDAwMDAuBgorBgEEAalDZAUMBCAMHuesrOS4ieaWueW5s+WPsOebkeWI\ntueroOivgeS5pjASBgorBgEEAalDZAIBBAQMAjY3MBoGBSpWCwcCBBEMD+mHjeW6huW4guWbveeojjAW\nBgUqVgsHAwQNDAsxNTAwMDAwMDAwMDAjBghghkgBhvhDCQQXDBUwMTAwMDEwMDAwMDAwMDAwMzM5NTUw\nGgYIYIZIAYb4QwoEDgwMNTAwMDIwMjAwMzQxMAwGCCqBHM9VAYN1BQADSAAwRQIga5nKbFrmp8/jpM+b\nSEYhszE+TBBGYdVAXL+BsdxXY9sCIQDjydwEEspkXOBS/ykYwzavX2kGNLpGaGplN48GVm4tOAYIKoEc\nz1UBg3UDSAAwRQIgN2/mwrCRizggXh3Ym1N7HuHY6BeGle91gmzOj2lreVECIQDmRLJ+gRqDaDbmzQgQ\nch1zfb0xQQZu9q0agCT7o9sRgQ=="
	str = strings.ReplaceAll(str, "\n", "")
	decode, err := ucapp4go.Base64Decode(str)
	if err != nil {
		println(err.Error())
		return
	}
	var sessign x509.SesSignature
	_, err = asn1.Unmarshal(decode, &sessign)
	if err != nil {
		println(err.Error())
		return
	}
	certx, err := ucapp4go.CertificateXConstructorWithByteArray(sessign.Cert.Bytes, nil)
	if err != nil {
		println(err.Error())
		return
	}
	tosignbytes, err := asn1.Marshal(sessign.ToSign)
	if err != nil {
		println(err.Error())
		return
	}
	encode, err := ucapp4go.HexEncode(tosignbytes)
	if err != nil {
		println(err.Error())
		return
	}
	println(encode)
	type sm2Signature struct {
		R, S *big.Int
	}

	var sm2pkcs1 sm2Signature
	_, err = asn1.Unmarshal(sessign.Signature.Bytes, &sm2pkcs1)
	if err != nil {
		println(err.Error())
		return
	}
	b := sm2.Sm2Verify(&sm2.PublicKey{
		Curve: certx.X509Cert.PublicKey.(*ecdsa.PublicKey).Curve,
		X:     certx.X509Cert.PublicKey.(*ecdsa.PublicKey).X,
		Y:     certx.X509Cert.PublicKey.(*ecdsa.PublicKey).Y,
	}, tosignbytes, []byte("1234567812345678"), sm2pkcs1.R, sm2pkcs1.S)
	println(b)
}
